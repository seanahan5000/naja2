
; valid for all I.XXX.S source files
ISOURCE_CHAR	=	$C0
ITARGET_CHAR	=	$C1

DOSTATS			LDA	CURSOR
				STA	ISOURCE_CHAR

RESTATS			JSR DRAW_PICT
				PictSetPage2
				PictClearPage
				PictSetGreen
				PictRect $A5;$00;$115;$BF
				PictEnd

				LDY	#profrace
				LDA	(CHARDL),Y
				AND	#$F0
				STA	CRFLAG
				BPL	:CHARACTER

:ROBOT			LDX	#<ROBOT_IMAGE
				LDY	#>ROBOT_IMAGE
				JSR UNPACK
				JSR	RSTUFER
				JSR	RINFOUT
				JMP	:COMMON

:CHARACTER		LDX	#<CHAR_IMAGE
				LDY	#>CHAR_IMAGE
				JSR UNPACK
				JSR	STUFOUT
				JSR	PUTGNRL

:COMMON			JSR DRAW_PICT
				PictTextAt 171;116;(EQUIPMENT_OPTIONS)
				PictTextAt 198;125;(MOVE\nDROP\nUSE\nEXAMINE)
				PictTextAt 180;162;(TRANSFER_ENERGY\nSEE_STATISTICS)
				PictTextAt 180;181;(LEAVE)
				PictShowPage
				PictEnd

				LDA	#0
				STA	ICURPOS
IMENU			LDX	#<ISTAT_MENU
				LDY	#>ISTAT_MENU
				JSR	MENU_INIT
				JSR MENU_SELECT
				STX ICURPOS
				JSR	IMARKER
				JSR MENU_TARGET
				LDX ICURPOS
				JSR	IMARKER
				LDA ISOURCE_CHAR
				JSR SET_CHAR
				JMP IMENU

; TODO: zpage maybe?
CRFLAG			DB	$00

*-------------------------------
ISTAT_MENU		DB	$87
ICURPOS			DB	$00
				DW	:ISTAT_CURS
				DW	:ISTAT_JUMPS

:ISTAT_JUMPS	DW	TO_MOVER
				DW	TO_DROPPER
				DW	TO_USE
				DW	TO_EXAMINE
				DW	TO_TRANSFER
				DW	SEESTAT
				DW	TO_RECAMP

:ISTAT_CURS		JSR	XY_SUB
				JMP	DRAW_ARROW
*-------------------------------

TO_MOVER		JSR BANK_2
				JMP MOVESUB

TO_DROPPER		JSR BANK_2
				JMP DROPSUB

TO_RECAMP		PLA
				PLA
				JMP RECAMP

TO_USE          LDA SHELL
                BNE :CAN_USE
				JSR DRAW_PICT
				PictSetGreen
				PictMoveTo $AB;$32
				PictLineTo $10F;$32
				PictMoveTo $AB;$67
				PictLineTo $10F;$67
		        PictTextAt 177;63;(NOT_ALLOWED_IN)
                PictTextAt 189;72;(MOTHERSHIP)
                PictTextAt 198;84;(<SPACE>)
				PictEnd
                BIT UNSTROB
:KEYLOOP        LDA KEYBRD
                BPL :KEYLOOP
                BIT UNSTROB
                JSR CHECK_ENTER
                BNE :KEYLOOP
                JSR DRAW_PICT
                PictClear 24;50;39;104
                PictEnd
:GO_BACK        RTS

:CAN_USE        LDY #status
                LDA (CHARDL),Y
                CMP #dead
                BEQ :GO_BACK
				JSR BANK_2
				JMP USER

TO_EXAMINE		JSR BANK_2
				JMP EXAMINE

TO_TRANSFER		LDY	#profrace
				LDA	(CHARDL),Y
				AND	#$F0
				CMP	#juicer*16
				BNE	:NOJUICER
				JMP	TRANSFER
:NOJUICER		RTS

; On entry:
;	X: CURSOR
;
IMARKER			JSR	XY_SUB
				INX
				INX
				INX
                JMP DRAW_MARKER
; On entry:
;	X: CURSOR
;
XY_SUB			LDY	:YPNTS,X
				LDA	#$B9
				CPX	#4
				BCC	:EXIT
				LDA	#$A7
:EXIT			TAX
				RTS

:YPNTS			DB	$7D,$86,$8F
				DB	$98,$A2,$AB
				DB	$B5

;-------------------------------------------------------------------------------

STUFOUT			JSR	DRAW_PICT
				PictTextAt 42;0;(HEAD)
				PictTextAt 50;9;(:)
				PictTextAt 50;17;(:)
				PictTextAt 42;33;(BACK)
				PictTextAt 42;98;(HANDS)
				PictTextAt 42;147;(ARMOR)
				PictTextAt 50;156;(:)
				PictTextAt 42;172;(FEET)
				PictTextAt 50;181;(:)
				PictEnd

				; draw variable number of back slots
				LDY	#back
				LDA	(CHARDL),Y
				BEQ :2
				TAX
:1				STX :TEXT_MOD+1
				LDY EPLINES+6-1,X
				LDX #$2C
				JSR MOVE_TO
				JSR DRAW_PICT
:TEXT_MOD		PictText (1:)
				PictEnd
				LDX :TEXT_MOD+1
				DEX
				BNE :1
:2
				; draw equipment by index
				LDX #0
:3				STX COUNT
				TXA
				JSR	EQUIP_IND_TO_TEXT
				LDX COUNT
				LDY EPLINES,X
				LDX #$42
				JSR DRAW_TEXTBUF_XY
				LDX COUNT
				INX
				CPX #$0E
				BNE :3

				LDY	#profrace
				LDA	(CHARDL),Y
				AND	#$0F
				CMP	#deneb
				BEQ	:DENEB

				JSR	DRAW_PICT
				PictTextAt 38;107;(_L:)
				PictTextAt 38;115;(_R:)
				PictEnd
				RTS

:DENEB			JSR	DRAW_PICT
				PictSetTextHeight 8
				PictTextAt 38;107;(UL:\nUR:\nLL:\nLR:)
				PictSetTextHeight 0
				PictEnd
				RTS

EPLINES			DFB	$09,$11,$6B
				DFB	$73,$7B,$83
				DFB	$2A,$32,$3A
				DFB	$42,$4A,$52
				DFB	$9C,$B5

PUTGNRL			JSR DRAW_PICT
				PictTextAt 171;4;(NAME:\nRACE:\nPROF:\nLEVL:\nEXPR:)
				PictMoveTo $CC;4
				PictEnd

				JSR CNAME_TO_TEXT
				JSR DRAW_TEXTBUF_RET

				JSR CRACE_TO_TEXT
				JSR DRAW_TEXTBUF_RET

				JSR CPROF_TO_TEXT
				JSR DRAW_TEXTBUF_RET

				JSR CLEVEL_TO_TEXT
				JSR DRAW_TEXTBUF_RET

				JSR CEXP_TO_TEXT
				JMP DRAW_TEXTBUF_RET

RSTUFER			LDY	#e1_HEAD
				LDA	(CHARDL),Y
				AND	#%00000111
				STA :RANGE_MOD

				LDX #9
				LDY	#e1_HEAD
				LDA	(CHARDL),Y
				BPL	:NOWITH
				JSR DRAW_PICT
				PictTextAt 26;9;(WITH:)
				PictEnd
				LDX #0
:NOWITH			STX :VMOVE_MOD+2
				JSR DRAW_PICT
				PictHMoveTo 26
:VMOVE_MOD		PictTextAt 26;9;(HEAD:)
				PictHMoveTo 66
				PictText (<SIGHT_RANGE-)-
:RANGE_MOD		USR	(_>)

				PictTextAt 42;104;(BACK)
				PictTextAt 50;113;(:)
				PictTextAt 42;128;(PROGRAM)
				PictTextAt 50;137;(:)
				PictTextAt 42;152;(MOVEMENT_TYPE)
				PictTextAt 50;161;(:)
				PictEnd

				LDY	#e1_HEAD
				LDA	(CHARDL),Y
				AND	#%00011000
				LSR
				LSR
				LSR
				LDX #<:RTREAD_NAMES
				LDY #>:RTREAD_NAMES
				JSR GET_IND_STRING
				LDX #66
				LDY #161
				JSR DRAW_TEXTBUF_XY

				JSR DRAW_PICT
				PictTextAt 42;33;(ARMS)
				;*** could use line breaks (with line height 8) ***
				PictTextAt 44;42;(L:)
				PictTextAt 44;50;(_:)
				PictTextAt 44;58;(R:)
				PictTextAt 44;66;(_:)
				PictEnd

				LDX #0
:1				STX COUNT
				LDY :IND_TABLE,X
				JSR	CEQUIP_TO_TEXT
				LDX COUNT
				LDY :Y_TABLE,X
				LDX #$42
				JSR DRAW_TEXTBUF_XY
				LDX COUNT
				INX
				CPX #7
				BNE :1
				RTS

:IND_TABLE		DB	e2_SLOT
				DB	e3_UPLFT
				DB	e4_UPRGT
				DB	e5_LWLFT
				DB	e6_LWRGT
				DB	e7_BACK1
				DB	e15_PROGRAM

:Y_TABLE		DB	9
				DB	42
				DB	50
				DB	58
				DB	64
				DB	113
				DB	137

:RTREAD_NAMES	USR(TREAD)=
				USR(LEVITATOR)=
				USR(TETRA-LEG)=
				USR(BI-LEG)=

RINFOUT			JSR DRAW_PICT
				PictTextAt 171;4;(NAME:\nPROF:\nLEVL:\nOWNR:)
				PictMoveTo $CC;4
				PictEnd

				JSR CNAME_TO_TEXT
				JSR DRAW_TEXTBUF_RET

				JSR CPROF_TO_TEXT
				JSR DRAW_TEXTBUF_RET

				LDX #0
				LDY	#e15_PROGRAM+1
				LDA	(CHARDL),Y
				AND	#$08
				BNE	:1
				JSR CLEVEL_TO_TEXT
				LDY	#e15_PROGRAM+1
				LDA	(CHARDL),Y
				BPL	:2
				LDA	#$0B
				STA	TEXT_BUFFER,X
				INX
:1				LDA	#TextLineEnd
				STA	TEXT_BUFFER,X
:2				JSR DRAW_TEXTBUF_RET

				; find the owner cybernate linked to this robot
				;*** move this the CHARACTER.S?
				LDY	#robotcyblink
				LDA	(CHARDL),Y
				PHA
				LDX #0
:3				TXA
				JSR	SET_CHAR
				PLA
				PHA
				LDY	#disklocation
				CMP	(CHARDL),Y
				BEQ	:4
				INX
				BNE	:3
:4				PLA
				JSR CNAME_TO_TEXT
				JSR DRAW_TEXTBUF_RET

				LDA	ISOURCE_CHAR
				JMP	SET_CHAR

; TODO: put these in $D000 banks?

CHAR_IMAGE      DB  $00,$05,$06,$BB
                HEX 80008940607058585C955858707060604000A54060709701
                HEX 0556AD5C95588D7089608D40AD60970004585C9997003AA7
                HEX 0142608D70A1B70140009D97016870A59F017700CD408D00
                HEX 60382E2B2ABD2B2B2E2C8D2E892B2B2A6A3A1A0E06060395
                HEX 06060E0E06950E891E1A893A953B896B952B892AC92B992A
                HEX C12BCD2ABD2B9D2EA12BA57F7F55F97F4100FDA101890389
                HEX 07890D8D079D7D55FDFDA175A9559D7F010F7A6A2AC57E3A
                HEX 6A912A8D2B2E383830306091309160A5308D3889309D388D
                HEX 2CA19F062340897F2AED6A8D3A1A890E8D1A950E06910399
                HEX 01A900A90103061A7A2A897F9706AF070D1D1D3535758D35
                HEX 8D758D3F00910103071D357555ED97080CA11DA10DB5079D
                HEX 0DAD0F078D97079900FDDD017F55557F00FD890103970236
                HEX 1AA90E8D97079297087DF989DC00FDA9010303
                DB	$FF

ROBOT_IMAGE     DB  $00,$1F,$09,$A0
                HEX 8000D5209960957078588D7838382C3E6E2E997E2C3830AD
                HEX 78189B78AF0044308D604000FD99406000E500899F005C70
                HEX 307C2C2C7C97030A30997030009160715F5E565755897535
                HEX 1D1F1D1D358D757F757555AD7F0073182C1873007FAF0244
                HEX 55957F060C183060ED302C2B2B7F037F00E5301C0F070307
                HEX 0E1B077F00070D0D0797050A0091601C1B18897830307F2A
                HEX 957F0100B5418D43737B7E893E2A7F405F55895F407F2A2F
                HEX 2C2D912C2F2A959703857F0A22282A970464A704649F056C
                HEX 6A5A5655917F008B12891000121210100212101012021010
                HEX 9704880210001000A1079702604000081838709703030106
                HEX 1C6C0C0C0F06067F559557565C58706040607070784C4C7E
                HEX 5797022755577B0101407E55E99F045E51441555970664A7
                HEX 06649F076C575A6A2A919704834989400941490049410940
                HEX 49019F0689084149000000B50103060C1818198918951B1C
                HEX 970606060E0E1A1A3A3A6A8D2A2B2A892B3E6A7F2A957E03
                HEX 00709704577A1A1A7A1A1A9F08459F09486A957F6030180C
                HEX 0706E5070D3555557F407F00E500FDB10101030307070D0D
                HEX 1D1F3F358D057F01007C07358D3F0303010303019F0A469F
                HEX 0A4C9D00FD890189030700E5EC008D403F60601F0099FEB6
                HEX EE1C1E07677F7E7D00FEC4EE9705000100FEC6
                DB	$FF

;-------------------------------------------------------------------------------

; used by I.COMPRESS, I.REGENERATE, I.TRANSFER, and I.USE

BIG_STATS_BOX	LDA #$42
				STA SELECT

				JSR DRAW_PICT
                PictClear 24;50;39;51
				PictSetPage1
				PictClearPage
				PictRect $01;$00;$115;$4F
				PictMoveTo $01;$0A
				PictLineTo $115;$0A
				PictVMoveTo 2
				PictCall STATS_HEADER
                PictVMove 10
				PictEnd

                JSR FIRST_CHAR
:1              JSR STATS_LINE
                JSR DRAW_PICT
                PictVMove 8
                PictEnd
                JSR NEXT_CHAR
                BCC :1

				JSR DRAW_PICT
				PictTextAt 16;70;(CANCEL)
				PictSetPage2
				PictSwap $00;$00;$28;$50
				PictMoveTo $AB;$68
				PictLineTo $10F;$68
				PictEnd

				JSR RESET_CHRLIST
				LDA	#$00
				STA	LEGALS+7
				RTS

HIDE_BIG_STATS  JSR DRAW_PICT
                PictClear 24;80;39;105
                PictSwap $00;$50;$28;$00
                PictEnd
                RTS

;-------------------------------------------------------------------------------
